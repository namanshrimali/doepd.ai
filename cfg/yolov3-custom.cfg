[net]
# Testing
# batch=1
# subdivisions=1
# Training
batch=64
subdivisions=16
width=608
height=608
channels=3
momentum=0.9
decay=0.0005
angle=0
saturation = 1.5
exposure = 1.5
hue=.1

learning_rate=0.001
burn_in=1000
max_batches = 500200
policy=steps
steps=400000,450000
scales=.1,.1


## ============================== start of Scale 3: for detecting large objects ==============================

# # midas returns 2048 output filters. Adding 1*1*2048*1024 to downscale number of filters
# commenting out because I need those pretrained weights to be compatible with existing weights
# [convolutional] 
# size=1
# stride=1
# pad=1
# filters=1024 
# activation=linear

# detection result
[convolutional]
size=1
stride=1
pad=1
filters=27
activation=linear


[yolo]
mask = 6,7,8
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326
classes=4
num=9
jitter=.3
ignore_thresh = .7
truth_thresh = 1
random=1
## ============================== end of Scale 3: for detecting large objects ==============================

# ============================== start of Scale 2: for detecting medium objects ==============================


# filters: 512
[route]
layers = 1
# getting input from layer 4 of midas


[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky


[upsample]
stride=2

# filters: 768
[route]
layers = -1, 2

[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky

[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=512
activation=leaky

[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky

[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=512
activation=leaky

[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky

[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=512
activation=leaky


#detection result
[convolutional]
size=1
stride=1
pad=1
filters=27 
activation=linear 


[yolo]
mask = 3,4,5
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326
classes=4
num=9
jitter=.3
ignore_thresh = .7
truth_thresh = 1
random=1
# ============================== end of Scale 2: for detecting medium objects ==============================

# ============================== start of Scale 1: for detecting small objects ==============================


# filters: 256 : do not touch this
[route]
layers = -4

[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky

[upsample]
stride=2

# filters: 384
[route]
layers = -1, 0
# from layer 2 of midas + one previous



[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky

[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=256
activation=leaky

[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky

[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=256
activation=leaky

[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky

[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=256
activation=leaky


#detection result
[convolutional]
size=1
stride=1
pad=1
filters=27 
activation=linear


[yolo]
mask = 0,1,2
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326
classes=4
num=9
jitter=.3
ignore_thresh = .7
truth_thresh = 1
random=1
# ============================== end of Scale 1: for detecting small objects ==============================
